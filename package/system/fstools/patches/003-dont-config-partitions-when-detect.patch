diff --git a/block.c b/block.c
index 60aaed4..c3e007e 100644
--- a/block.c
+++ b/block.c
@@ -736,31 +736,6 @@ static char* find_mount_point(char *block)
 	return point;
 }
 
-static int print_block_uci(struct probe_info *pr)
-{
-	if (!strcmp(pr->type, "swap")) {
-		printf("config 'swap'\n");
-	} else {
-		char *mp = find_mount_point(pr->dev);
-
-		printf("config 'mount'\n");
-		if (mp) {
-			printf("\toption\ttarget\t'%s'\n", mp);
-			free(mp);
-		} else {
-			printf("\toption\ttarget\t'/mnt/%s'\n", basename(pr->dev));
-		}
-	}
-	if (pr->uuid)
-		printf("\toption\tuuid\t'%s'\n", pr->uuid);
-	else
-		printf("\toption\tdevice\t'%s'\n", pr->dev);
-	printf("\toption\tfstype\t'%s'\n", (!strcmp(pr->id->name, "ntfs") ? "ntfs-3g" : pr->id->name));
-	printf("\toption\tenabled\t'0'\n\n");
-
-	return 0;
-}
-
 static int print_block_info(struct probe_info *pr)
 {
 	static char *mp;
@@ -1791,7 +1766,6 @@ static int main_umount(int argc, char **argv)
 
 static int main_detect(int argc, char **argv)
 {
-	struct device *dev;
 
 	cache_load(0);
 	printf("config 'global'\n");
@@ -1801,8 +1775,6 @@ static int main_detect(int argc, char **argv)
 	printf("\toption\tauto_mount\t'1'\n");
 	printf("\toption\tdelay_root\t'5'\n");
 	printf("\toption\tcheck_fs\t'0'\n\n");
-	vlist_for_each_element(&devices, dev, node)
-		print_block_uci(dev->pr);
 
 	return 0;
 }
diff --git a/block.c.orig b/block.c.orig
index b6d49a8..60aaed4 100644
--- a/block.c.orig
+++ b/block.c.orig
@@ -265,6 +265,55 @@ static void parse_mount_options(struct mount *m, char *optstr)
 	free(optstr);
 }
 
+static const char *mount_flags_to_string(unsigned long mountflags)
+{
+	static char param[256];
+
+	param[0] = 0;
+
+	if (mountflags & MS_SYNCHRONOUS)
+		strcat(param, "sync,");
+	else
+		strcat(param, "async,");
+
+	if (mountflags & MS_DIRSYNC)
+		strcat(param, "dirsync,");
+
+	if (mountflags & MS_MANDLOCK)
+		strcat(param, "mand,");
+
+	if (mountflags & MS_NOATIME)
+		strcat(param, "noatime,");
+
+	if (mountflags & MS_NODEV)
+		strcat(param, "nodev,");
+
+	if (mountflags & MS_NODIRATIME)
+		strcat(param, "nodiratime,");
+
+	if (mountflags & MS_NOEXEC)
+		strcat(param, "noexec,");
+
+	if (mountflags & MS_NOSUID)
+		strcat(param, "nosuid,");
+
+	if (mountflags & MS_RDONLY)
+		strcat(param, "ro,");
+	else
+		strcat(param, "rw,");
+
+	if (mountflags & MS_RELATIME)
+		strcat(param, "relatime,");
+
+	if (mountflags & MS_STRICTATIME)
+		strcat(param, "strictatime,");
+
+	if (param[0])
+		param[strlen(param) - 1] = 0;
+
+	return param;
+}
+
 static int mount_add(struct uci_section *s)
 {
 	struct blob_attr *tb[__MOUNT_MAX] = { 0 };
@@ -706,6 +755,7 @@ static int print_block_uci(struct probe_info *pr)
 		printf("\toption\tuuid\t'%s'\n", pr->uuid);
 	else
 		printf("\toption\tdevice\t'%s'\n", pr->dev);
+	printf("\toption\tfstype\t'%s'\n", (!strcmp(pr->id->name, "ntfs") ? "ntfs-3g" : pr->id->name));
 	printf("\toption\tenabled\t'0'\n\n");
 
 	return 0;
@@ -961,8 +1011,34 @@ static int handle_mount(const char *source, const char *target,
 	size_t mount_opts_len;
 	char *mount_opts = NULL, *ptr;
 
-	err = mount(source, target, fstype, m ? m->flags : 0,
-	            (m && m->options) ? m->options : "");
+	if (strcmp(fstype, "ntfs-3g") && strcmp(fstype, "ntfs") && strcmp(fstype, "exfat"))
+	{
+		err = mount(source, target, fstype, m ? m->flags : 0,
+		            (m && m->options) ? m->options : "");
+	}
+	else
+	{
+		char cmd[1024];
+		const char *param;
+		param = mount_flags_to_string(m ? m->flags : 0);
+		if (strcmp(fstype, "exfat"))
+		{
+			err = mount(source, target, "ufsd", m->flags, (m->options) ? (m->options) : (""));
+			if(err)
+			{
+				snprintf(cmd, sizeof (cmd), "ntfs-3g -o \"%s,%s\" %s %s >/dev/null",
+					param, (m->options) ? (m->options) : (""), source, target);
+				err = system(cmd);
+			}
+
+		}
+		else
+		{
+			snprintf(cmd, sizeof (cmd), "mount -t exfat -o \"%s,%s\" %s %s >/dev/null",
+				param, (m->options) ? (m->options) : (""), source, target);
+			err = system(cmd);
+		}
+	}
 
 	/* Requested file system type is not available in kernel,
 	   attempt to call mount helper. */
